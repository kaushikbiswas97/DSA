class Solution {
    // public int solve(int[] nums,int idx,int K,int[][] dp)
    // {
    //     if(idx==0)
    //     {
    //         if(K%nums[idx]==0)return 1;
    //         else return 0;
    //     }
    //     if(dp[idx][K]!=-1)return dp[idx][K-1];
    //     int not=solve(nums,idx-1,K,dp);
    //     int take=0;
    //     if(nums[idx]<=K){
    //         take=solve(nums,idx,K-nums[idx],dp);
    //     }
    //     return dp[idx][K]=take+not;
    // }
    public int combinationSum4(int[] nums, int target) {
        int[] dp =new int[target+1];
        dp[0]=1;
        for(int i=1;i<=target;i++)
        {
            for(int it:nums)
            {
                if(i-it>=0){
                    dp[i]+=dp[i-it];
                }
            }
        }
        return dp[target];
        // for(int it[]:dp)
        // {
        //     Arrays.fill(it,-1);
        // }
        // return solve(nums,nums.length-1,target,dp);
    }
}
