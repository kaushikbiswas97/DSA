class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> q= new LinkedList<>();
        int r=grid.length;
        int c=grid[0].length;
        int fresh_count=0;
        //base case
        if(grid==null || grid.length==0)
        return 0;

        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    q.offer(new int[]{i,j});
                }
                if(grid[i][j]!=0){
                    fresh_count++;
                }
            }
        }
        if(fresh_count==0)return 0;

        int rotTofrsh=0;
        int time=0;
        int dx[]={1,-1,0,0};
        int dy[]={0,0,1,-1};
        while(!q.isEmpty())
        {
            int size=q.size();
            rotTofrsh+=size;

            for(int i=0;i<size;i++){
                int[] curr_point=q.poll();
                for(int j=0;j<4;j++){
                    int nr=curr_point[0]+dx[j];
                    int nc=curr_point[1]+dy[j];

                    if(nr<0 || nc<0 || nr>=r || nc>=c || grid[nr][nc]==2 || grid[nr][nc]==0)continue;
                    grid[nr][nc]=2;
                    q.offer(new int[]{nr,nc});
                }
            }
            if(q.size()!=0)
                time++;
        }
        return rotTofrsh==fresh_count?time:-1;
    }
}
Console
