class Solution {
    public int numEnclaves(int[][] board) {
        int m=board.length;
        int n=board[0].length;
        int[][] vis=new int[m][n];
        int[] dx={1,-1,0,0};
        int[] dy={0,0,1,-1};
        //traverse 1st row
        for(int i=0;i<n;i++)
        {
            if(vis[0][i]==0 && board[0][i]==1){
                dfs(0,i,board,vis,dx,dy);
            }
            if(vis[m-1][i]==0 && board[m-1][i]==1){
                dfs(m-1,i,board,vis,dx,dy);
            }
        }
        for(int i=0;i<m;i++)
        {
            if(vis[i][0]==0 && board[i][0]==1){
                dfs(i,0,board,vis,dx,dy);
            }
            if(vis[i][n-1]==0 && board[i][n-1]==1){
                dfs(i,n-1,board,vis,dx,dy);
            }
        }
        int cnt=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(vis[i][j]==0 && board[i][j]==1){
                    vis[i][j]=1;
                    cnt++;
                }
            }
        }
        return cnt;
    }
    public void dfs(int r,int c,int[][] board,int[][] vis,int[] dx,int[] dy)
    {
        vis[r][c]=1;
        for(int i=0;i<4;i++){
            int nr=r+dx[i];
            int nc=c+dy[i];
            if(nr>=0 && nc>=0 && nr<board.length && nc<board[0].length && vis[nr][nc]==0 &&              board[nr][nc]==1){
                dfs(nr,nc,board,vis,dx,dy);
            }
        }

    }
}
