/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
class itemComp implements Comparator<Item>
{
    @Override
    public int compare(Item a,Item b)
    {
        double v1=(double)(a.value)/(double)(a.weight);
        double v2=(double)(b.value)/(double)(b.weight);
        
        if(v1<v2)return 1;
        else if(v1>v2)return -1;
        return 0;
    }
}
class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        Arrays.sort(arr,new itemComp());
        double val=0.0;
        int currWg=0;
        
        for(int i=0;i<n;i++)
        {
            if(currWg+arr[i].weight<=W)
            {
                currWg+=arr[i].weight;
                val+=(double)(arr[i].value);
            }
            else{
                int remWg=W-currWg;
                val+=((double)(arr[i].value)/(double)(arr[i].weight))*(double)remWg;
                break;
            }
        }
        return val;
    }
}
