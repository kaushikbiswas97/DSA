class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int[][] dp=new int[m][n];
        for(int[] it:dp)
        {
            Arrays.fill(it,-1);
        }
        return solve(0,0,m,n,obstacleGrid,dp);
    }
    public int solve(int i,int j,int r,int c,int[][] grid,int[][] dp)
    {
        if(grid[r-1][c-1]==1)return 0;
        if(i==r-1 && j==c-1)return 1;
        if(i==r || j==c || i<0 || j<0 || grid[i][j]==1)return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        int right=solve(i,j+1,r,c,grid,dp);
        int down=solve(i+1,j,r,c,grid,dp);
        return dp[i][j]=right+down;
    }
}
