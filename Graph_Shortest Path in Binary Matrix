class Triple
{
    int dis;
    int row;
    int col;
    public Triple(int dis,int row,int col)
    {
        this.dis=dis;
        this.row=row;
        this.col=col;
    }
}
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        //base case
        int n=grid.length;
        if(grid[n-1][n-1]==1 || grid[0][0]==1)return -1;
        if(n-1==0)return 1;
        int[][] dis=new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                dis[i][j]=(int)1e9;
            }
        }

        dis[0][0]=1;
        Queue<Triple> q=new LinkedList<>();
        q.add(new Triple(1,0,0));

        int[] dx={0,0,1,-1,1,-1,1,-1};
        int[] dy={1,-1,0,0,1,1,-1,-1};

        while(!q.isEmpty())
        {
            Triple temp=q.poll();
            int dist=temp.dis;
            int r=temp.row;
            int c=temp.col;
            for(int i=0;i<8;i++)
            {
                int nr=r+dx[i];
                int nc=c+dy[i];
                if(nr>=0 && nc>=0 && nr<n && nc<n && grid[nr][nc]==0 && dis[nr][nc]>1+dist){
                    dis[nr][nc]=1+dist;
                    if(nr==n-1 && nc==n-1)return dist+1;
                    q.add(new Triple(dist+1,nr,nc));
                }
            }
        }
    return -1;
    }
}
